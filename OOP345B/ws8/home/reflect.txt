/***********************************************************/
// Name:Madeeha Shahzadi
// Seneca Student ID:130630182
// Seneca email:mshahzadi1@myseneca.ca
// Date of completion: April 1st 2020
//
// I confirm that the content of this file is created by me,
//   with the exception of the parts provided to me by my professor.
/******************************************************/
Question 1:
Create a text file named reflect.txt that contains your detailed description of the topics that you have learned in completing this particular workshop and mention any issues that caused you difficulty and how you solved them. Include in your explanation—but do not limit it to—the following points:
/******************************************************************************/
Question 2:
the advantage that smart pointer syntax provides. Use example from your code to support your explanation.
The advantage that smart pointer syntax provides.
   The smart pointer manages the memory of the object to which it points avoiding memory leak. I mean, the smart
   pointer allocates memory and is responsible for the deallocation too.

	priceList += p;
	delete p;
	p = nullptr;
/******************************************************************************/
the difference between raw and smart pointer syntax in your solution.

 --  To use the smart pointer I included the library <memory> and I didn't have to 		deallocate the object memory.

    --	When a raw pointer is no longer useful, I have to delete it, and the syntax is: 
	delete p;

    --  To define a raw pointer, the syntax is: Product* p = new Product(desc[i].desc, 		price[j].price);
	While to define a smart pointer, the syntax is: std::unique_ptr<Product> p(new 		Product(desc[i].desc, price[j].price));